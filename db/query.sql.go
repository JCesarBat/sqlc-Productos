// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package db

import (
	"context"
)

const buscarProducto = `-- name: BuscarProducto :one
SELECT id, nombre, precio, cantidad, id_estado FROM Producto WHERE ID = $1 LIMIT 1
`

func (q *Queries) BuscarProducto(ctx context.Context, id int32) (Producto, error) {
	row := q.db.QueryRowContext(ctx, buscarProducto, id)
	var i Producto
	err := row.Scan(
		&i.ID,
		&i.Nombre,
		&i.Precio,
		&i.Cantidad,
		&i.IDEstado,
	)
	return i, err
}

const buscarTProductos = `-- name: BuscarTProductos :many
SELECT id, nombre, precio, cantidad, id_estado FROM producto
`

func (q *Queries) BuscarTProductos(ctx context.Context) ([]Producto, error) {
	rows, err := q.db.QueryContext(ctx, buscarTProductos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Producto
	for rows.Next() {
		var i Producto
		if err := rows.Scan(
			&i.ID,
			&i.Nombre,
			&i.Precio,
			&i.Cantidad,
			&i.IDEstado,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const buscarTodosEstados = `-- name: BuscarTodosEstados :many
SELECT id, descripcion FROM estado
`

func (q *Queries) BuscarTodosEstados(ctx context.Context) ([]Estado, error) {
	rows, err := q.db.QueryContext(ctx, buscarTodosEstados)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Estado
	for rows.Next() {
		var i Estado
		if err := rows.Scan(&i.ID, &i.Descripcion); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const eliminar = `-- name: Eliminar :one
DELETE FROM producto WHERE ID = $1  RETURNING id, nombre, precio, cantidad, id_estado
`

func (q *Queries) Eliminar(ctx context.Context, id int32) (Producto, error) {
	row := q.db.QueryRowContext(ctx, eliminar, id)
	var i Producto
	err := row.Scan(
		&i.ID,
		&i.Nombre,
		&i.Precio,
		&i.Cantidad,
		&i.IDEstado,
	)
	return i, err
}

const insertarEstado = `-- name: InsertarEstado :one
INSERT INTO estado(descripcion)VALUES ($1) RETURNING id, descripcion
`

func (q *Queries) InsertarEstado(ctx context.Context, descripcion string) (Estado, error) {
	row := q.db.QueryRowContext(ctx, insertarEstado, descripcion)
	var i Estado
	err := row.Scan(&i.ID, &i.Descripcion)
	return i, err
}

const insertarProducto = `-- name: InsertarProducto :one
INSERT INTO producto (Nombre,Precio,Cantidad,ID_Estado)VALUES ($1,$2,$3,$4)RETURNING id, nombre, precio, cantidad, id_estado
`

type InsertarProductoParams struct {
	Nombre   string
	Precio   int32
	Cantidad int32
	IDEstado int32
}

func (q *Queries) InsertarProducto(ctx context.Context, arg InsertarProductoParams) (Producto, error) {
	row := q.db.QueryRowContext(ctx, insertarProducto,
		arg.Nombre,
		arg.Precio,
		arg.Cantidad,
		arg.IDEstado,
	)
	var i Producto
	err := row.Scan(
		&i.ID,
		&i.Nombre,
		&i.Precio,
		&i.Cantidad,
		&i.IDEstado,
	)
	return i, err
}
